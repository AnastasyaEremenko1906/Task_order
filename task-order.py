import streamlit as st
import pandas as pd
import psycopg2
from datetime import datetime, timedelta

#test
#test11

st.set_page_config(page_title="–ù–∞—Ä—è–¥-–∑–∞–¥–∞–Ω–∏–µ",
                   page_icon='üìö',
                   layout="wide",
                   initial_sidebar_state="expanded"
                   )
st.title("–ù–∞—Ä—è–¥ - –∑–∞–¥–∞–Ω–∏–µ")
st.text("")


# ______________________________________________________________________________________________________________________
# –ø–µ—Ä–µ–¥–∞—á–∞ –ó–ê–†–ê–ù–ï–ï –ù–ê–ü–ò–°–ê–ù–ù–û–ì–û –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î
def execute_query(connection, query):
    connection.rollback()
    connection.autocommit = True
    cursor = connection.cursor()
    try:
        cursor.execute(query)
        connection.commit()
    except psycopg2.OperationalError as e:
        connection.close()
        st.error(f"The error '{e}' occurred")
    except psycopg2.errors.UniqueViolation:
        connection.close()
        st.error('–î–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –∑–∞–Ω–µ—Å–µ–Ω–æ')
        st.stop()


# —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–∞ (–î–û–ë–ê–í–õ–ï–ù–ò–ï –∏–Ω—Ñ—ã –≤ –ë–î)
def request_append(start_date, end_date, work_type, person_fio_list, department, destination, district_coef,
                   machine_type, machine_number, any_comment):
    list_of_works = """select id from types_of_work where types_of_work='{}'""".format(work_type)
    id_of_work = pd.read_sql(list_of_works, connection)
    id_of_work = id_of_work.iat[0, 0]
    for selected_name in person_fio_list:
        list_of_fio = """select id_person from fio_person where fio='{}'""".format(selected_name)
        id_of_fio = pd.read_sql(list_of_fio, connection)

        # –ø–æ–ª—É—á–∞—é df –∏–∑ 1 —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª—Ü–∞; –¥–∞–ª–µ–µ –∏–∑–≤–ª–µ–∫–∞—é –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏/—Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ‚Ññ —Ä–∞–±–æ—Ç—ã
        id_of_fio = id_of_fio.iat[0, 0]

        query = """INSERT INTO task_order (start_dates, end_dates, work_type, person_fio, department,
                destination, district_coef, machine_type,machine_number, any_comment) VALUES """
        query += """('{}','{}','{}','{}','{}','{}','{}', '{}', '{}', '{}'),""".format(start_date, end_date, int(id_of_work),
                                                                                      int(id_of_fio), department,
                                                                                      destination,
                                                                                      district_coef, machine_type,
                                                                                      machine_number, any_comment)
        # connection.close()
        execute_query(connection, query[:-1])
        st.success('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!')


# —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–∞ (–ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–ô –∏–Ω—Ñ—ã –≤ –ë–î)
def make_request():
    select_from_sql = """SELECT * FROM task_order taskor JOIN types_of_work typesw ON taskor.work_type = typesw.id
                                                         JOIN fio_person fio ON taskor.person_fio = fio.id_person"""
    return select_from_sql


# —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–∞ (–ü–û–õ–£–ß–ï–ù–ò–ï –∏–Ω—Ñ—ã –ø–æ –Ω–µ–¥–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º —Å–æ–±—ã—Ç–∏—è–º –≤ –ë–î)
def make_request_non_full():
    select_non_full = """SELECT * FROM task_order taskor JOIN types_of_work typesw ON taskor.work_type = typesw.id
                                                         JOIN fio_person fio ON taskor.person_fio = fio.id_person 
    where (department='' or destination='' or machine_type='' or machine_number='');"""
    df_non_full = pd.read_sql(select_non_full, connection)
    df_non_full = df_non_full.loc[:,
                  ['id_event', 'start_dates', 'end_dates', 'types_of_work', 'fio', 'department', 'destination',
                   'district_coef', 'machine_type', 'machine_number', 'any_comment']]
    df_non_full = df_non_full.rename(columns=total_dict)
    table_len = len(df_non_full)
    if table_len == 0:
        status = '–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç'
        return [status, ""]
    else:
        status = "–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: "
        return [status, df_non_full]


# —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–∞ (–£–î–ê–õ–ï–ù–ò–ï —Å—Ç—Ä–æ–∫–∏ –ø–æ id(–Ω–æ–º–µ—Ä—É —Å–æ–±—ã—Ç–∏—è))
def delete_row_sql(event_number):
    delete_in_sql = """DELETE FROM task_order WHERE id_event='{}'""".format(event_number)
    execute_query(connection, delete_in_sql)
    st.success('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!')


# —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–∞ (–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï —ç–ª–µ–º–µ–Ω—Ç–∞)
def change_value_sql(event_number, select_column, new_value):
    # –æ—Ç–¥–µ–ª—å–Ω–æ –∑–∞–ø–∞—Ä–∏–≤–∞—é—Å—å —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–æ –§–ò–û, –≤–∏–¥–∞–º —Ä–∞–±–æ—Ç
    if select_column == "–§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞":
        select_index = """select id_person from fio_person where fio = '{}'""".format(new_value)
        id_of_fio = pd.read_sql(select_index, connection)
        new_value = id_of_fio.iat[0, 0]
    elif select_column == "–í–∏–¥ —Ä–∞–±–æ—Ç—ã":
        select_index = """select id from types_of_work where types_of_work = '{}'""".format(new_value)
        id_of_work = pd.read_sql(select_index, connection)
        new_value = id_of_work.iat[0, 0]
    change_value_sql = """UPDATE task_order SET {} = '{}' WHERE id_event = '{}'""".format((dict_streamlit_to_sql
                                                                                           .get(select_column)),
                                                                                          new_value, event_number)
    execute_query(connection, change_value_sql)
    st.success('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!')
    st.info('–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–π—Ç–∏ –∫ '
            '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"')


# —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–∞ (–ü–û–õ–£–ß–ï–ù–ò–ï —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç)
def list_of_works():
    list_of_works = """SELECT types_of_work FROM types_of_work"""
    df_works = pd.read_sql(list_of_works, connection)
    return df_works["types_of_work"].tolist()


# —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–∞ (–ü–û–õ–£–ß–ï–ù–ò–ï —Ñ–∏–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)
def list_of_workers():
    list_of_workers = """SELECT DISTINCT fio FROM fio_person ORDER BY fio"""
    df_workers = pd.read_sql(list_of_workers, connection)
    return df_workers['fio'].tolist()


# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
def create_connection(db_name, db_user, db_password, db_host, db_port):
    connection = None
    try:
        connection = psycopg2.connect(
            database=db_name,
            user=db_user,
            password=db_password,
            host=db_host,
            port=db_port,
        )
        # print("Connection to PostgreSQL DB successful")
    except psycopg2.OperationalError as e:
        print(f"The error '{e}' occurred")
    return connection


connection = create_connection(
    "production", "postgres", "admin228", "192.168.10.12", "5432"
)

# —Å–µ—Å—Å–∏—è + –í–†–ï–ú–ï–ù–ù–´–ï —Å–ø–∏—Å–∫–∏ + –ø–æ–ª–µ–∑–Ω—ã–µ –ø–ª—é—à–∫–∏
if "update_str" not in st.session_state:
    st.session_state.update_str = None
# ___________________________
types_of_work = list_of_works()
fio_list = list_of_workers()
# ___________________________
names_in_sql = ['id_event', 'start_dates', 'end_dates', 'work_type', 'person_fio', 'department', 'destination',
                'district_coef', 'machine_type', 'machine_number', 'any_comment']
names_in_streamlit = ['‚Ññ —Å–æ–±—ã—Ç–∏—è', '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞', '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è',
                      '–í–∏–¥ —Ä–∞–±–æ—Ç—ã', '–§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', '–ü—É–Ω–∫—Ç –æ–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
                      '–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è', '–†–∞–π–æ–Ω–Ω—ã–π –∫–æ—ç—Ñ-—Ç', '–í–∏–¥ —Ç–µ—Ö–Ω–∏–∫–∏', '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä',
                      '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']
total_dict = {'id_event': '‚Ññ —Å–æ–±—ã—Ç–∏—è',
              'start_dates': '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞',
              'end_dates': '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è',
              'types_of_work': '–í–∏–¥ —Ä–∞–±–æ—Ç—ã',
              'fio': '–§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞',
              'department': '–ü—É–Ω–∫—Ç –æ–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
              'destination': '–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
              'district_coef': '–†–∞–π–æ–Ω–Ω—ã–π –∫–æ—ç—Ñ-—Ç',
              'machine_type': '–í–∏–¥ —Ç–µ—Ö–Ω–∏–∫–∏',
              'machine_number': '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä',
              'any_comment': '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'}
dict_streamlit_to_sql = dict(zip(names_in_streamlit, names_in_sql))
dict_sql_to_streamlit = dict(zip(names_in_sql, names_in_streamlit))

# ___________________________
date_today = datetime.today()
date_min = date_today - timedelta(days=30)
date_max = date_today + timedelta(days=30)


# —Å—á–∏—Ç—ã–≤–∞—é df, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
def my_df():
    df = pd.read_sql(make_request(), connection)
    df = df.loc[:, ['id_event', 'start_dates', 'end_dates', 'types_of_work', 'fio', 'department', 'destination',
                    'district_coef', 'machine_type', 'machine_number', 'any_comment']]
    df = df.rename(columns=total_dict)
    table_len = len(df)
    if table_len == 0:
        status = '–ù–∞—Ä—è–¥ - –∑–∞–¥–∞–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–±—ã—Ç–∏–π. –î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç "–î–æ–±–∞–≤–∏—Ç—å"'
        return [status, df]
    else:
        status = "–í—Å–µ —Å–æ–±—ã—Ç–∏—è: "
        return [status, df]


# ______________________________________________________________________________________________________________________
# –ú–ï–ù–Æ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø —Å–æ–±—ã—Ç–∏–π
def change_data():
    my_table = my_df()[1]
    if my_table.empty:
        st.text("–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π")
    else:
        values_selection = st.selectbox('–û—Ç—Å–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –ø–æ –∏—Å–∫–æ–º–æ–º—É —Ç–∏–ø—É —Ä–∞–±–æ—Ç: ',
                                        my_table.iloc[:, 3].unique().tolist())
        selected_rows = my_table[my_table.iloc[:, 3] == values_selection]
        st.markdown("<hr />", unsafe_allow_html=True)
        st.write("**–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–π–¥–µ–Ω—ã —Å–æ–±—ã—Ç–∏—è: **")
        st.write(selected_rows)
        st.markdown("<hr />", unsafe_allow_html=True)
        index_selection = selected_rows.iloc[:, 0]
        coll1, coll2 = st.columns(2)
        coll1.write("**–í—ã–±–µ—Ä–∏—Ç–µ ‚Ññ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: **")
        event_number = coll1.selectbox('', index_selection.tolist())
        coll1.markdown("<hr />", unsafe_allow_html=True)
        st.write("**–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ: **")
        st.table(my_table[my_table["‚Ññ —Å–æ–±—ã—Ç–∏—è"] == int(event_number)])
        if st.button("–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é {}-–æ–≥–æ —Å–æ–±—ã—Ç–∏—è".format(event_number)):
            st.session_state.update_str = "Start_edit"
        if st.session_state.update_str == "Start_edit":
            st.markdown("<hr />", unsafe_allow_html=True)
            st.title("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è –Ω–∏–∂–µ:")
            st.text("")
            select_column = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü, –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å: ', my_table.columns[1:])
            st.text("")
            st.write("–í–≤–µ–¥–∏—Ç–µ/–≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —è—á–µ–π–∫–µ –Ω–∏–∂–µ: ")
            if select_column == my_table.columns[1] or select_column == my_table.columns[2]:
                new_value = st.date_input("", value=None, min_value=date_min, max_value=date_max, key=3)
            elif select_column == my_table.columns[3]:
                new_value = st.selectbox("", list_of_works())
            elif select_column == my_table.columns[4]:
                new_value = st.selectbox("", fio_list)
            else:
                new_value = st.text_input("")
            st.text("")
            if st.button("–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
                change_value_sql(event_number, select_column, new_value)

                st.session_state.update_str = "End_edit"


# –ú–ï–ù–Æ –î–û–ë–ê–í–õ–ï–ù–ò–Ø —Å–æ–±—ã—Ç–∏–π
def append_data():
    start_date = st.date_input("–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ :", value=None, min_value=date_min, max_value=date_max, key=1)
    end_date = st.date_input("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è :", value=None, min_value=date_min, max_value=date_max, key=2)
    work_type = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç—ã:', types_of_work)

    st.markdown("<hr />", unsafe_allow_html=True)

    person_fio_list = st.multiselect('–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ', fio_list)
    department = st.text_input('–í–≤–µ–¥–∏—Ç–µ –ø—É–Ω–∫—Ç –æ–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
    destination = st.text_input('–í–≤–µ–¥–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è')

    st.markdown("<hr />", unsafe_allow_html=True)

    district_coef = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ-—Ç")
    machine_type = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∞–≤—Ç–æ")
    machine_number = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ")

    st.markdown("<hr />", unsafe_allow_html=True)
    any_comment = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–æ–±—ã—Ç–∏—é (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)")
    col1, col2, col3, col4 = st.columns(4)
    button = col1.button("–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
    if button and len(person_fio_list) == 0:
        st.error('–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —É–∫–∞–∂–∏—Ç–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
    elif button:
        try:
            my_table = my_df()
            request_append(start_date, end_date, work_type, person_fio_list, department, destination,
                           district_coef,
                           machine_type, machine_number, any_comment)
        except psycopg2.errors.UniqueViolation:
            st.error("–¢–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ")


# –ú–ï–ù–Æ –£–î–ê–õ–ï–ù–ò–Ø —Å–æ–±—ã—Ç–∏–π –≤ df
def delete_data():
    my_table = my_df()[1]
    if my_table.empty:
        st.text("–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π")
    else:
        st.text("")
        st.text("–û—Ç—Å–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –ø–æ –∏—Å–∫–æ–º–æ–º—É —Ç–∏–ø—É —Ä–∞–±–æ—Ç:")
        values_selection = st.selectbox('', my_table.iloc[:, 3].unique().tolist())
        selected_rows = my_table[my_table.iloc[:, 3] == values_selection]
        st.markdown("<hr />", unsafe_allow_html=True)
        st.text("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–π–¥–µ–Ω—ã —Å–æ–±—ã—Ç–∏—è: ")
        st.write(selected_rows)
        st.markdown("<hr />", unsafe_allow_html=True)
        index_selection = selected_rows.iloc[:, 0]
        st.text('–í—ã–±–µ—Ä–∏—Ç–µ ‚Ññ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ')
        event_number = st.selectbox("", index_selection.tolist())
        col1, col2, col3 = st.columns(3)
        button = col1.button("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ")
        if button:
            my_table = my_df()
            delete_row_sql(event_number)


# –°–û–ó–î–ê–ù–ò–ï –ú–ï–ù–Æ —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Ä—è–¥-–∑–∞–¥–∞–Ω–∏–µ–º
option_menu = ["–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "–£–¥–∞–ª–∏—Ç—å", "–î–æ–±–∞–≤–∏—Ç—å"]
st.sidebar.title("–ú–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Ä—è–¥ - –∑–∞–¥–∞–Ω–∏–µ–º: ")
main_menu = st.sidebar.selectbox("", option_menu)
if main_menu == option_menu[0]:
    if my_df()[0] == "–í—Å–µ —Å–æ–±—ã—Ç–∏—è: ":
        st.write(make_request_non_full()[0])
        st.write(make_request_non_full()[1])
        st.markdown("<hr />", unsafe_allow_html=True)
        st.write("**–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä:**")
        choice_filter = st.radio("", ['–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è', '–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è'])
        if choice_filter == "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è":
            st.write(my_df()[0])
            st.write(my_df()[1])
        elif choice_filter == "–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è":
            st.write("–û—Ç—Ñ–∏–ª—å—Ç—Ä—É–π—Ç–µ —Å–æ–±—ã—Ç–∏—è:")
            col1, col2, col3, col4 = st.columns(4)
            form_filter = st.form('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞')
            cond_1 = col1.checkbox("–ü–æ –¥–∞—Ç–µ —Å—Ç–∞—Ä—Ç–∞")
            cond_2 = col2.checkbox("–ü–æ –¥–∞—Ç–µ —Ñ–∏–Ω–∏—à–∞")
            cond_3 = col3.checkbox("–ü–æ –§–ò–û")
            cond_4 = col4.checkbox("–ü–æ –≤–∏–¥—É —Ä–∞–±–æ—Ç")
            with form_filter:
                col_form_filter_1, col_form_filter_2 = st.columns(2)
                if cond_1:
                    start_date = col_form_filter_1.date_input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å—Ç–∞—Ä—Ç–∞ :", value=None, min_value=date_min,
                                                              max_value=date_max,
                                                              key=4)
                else:
                    start_date = False
                if cond_2:
                    end_date = col_form_filter_1.date_input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è :", value=None, min_value=date_min,
                                                            max_value=date_max,
                                                            key=4)
                else:
                    end_date = False
                if cond_3:
                    person_fio_list = col_form_filter_1.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ', fio_list)
                else:
                    person_fio_list = False
                if cond_4:
                    work_type = col_form_filter_1.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç—ã:', types_of_work)
                else:
                    work_type = False
                apply_filter = st.form_submit_button('–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä(—ã)')
                if apply_filter:
                    filtered_df = my_df()[1]
                    if start_date:
                        filtered_df = filtered_df.loc[filtered_df['–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞'] == start_date]
                    if end_date:
                        filtered_df = filtered_df.loc[filtered_df['–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è'] == end_date]
                    if person_fio_list:
                        filtered_df = filtered_df.loc[filtered_df['–§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'] == person_fio_list]
                    if work_type:
                        filtered_df = filtered_df.loc[filtered_df['–í–∏–¥ —Ä–∞–±–æ—Ç—ã'] == work_type]
                    if len(filtered_df) == 0:
                        st.warning("–ü–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    else:
                        st.write(filtered_df)
    else:
        st.write(my_df()[0])
        st.markdown("<hr />", unsafe_allow_html=True)
        st.write(make_request_non_full()[0])
        st.write(make_request_non_full()[1])
elif main_menu == option_menu[1]:
    change_data()
elif main_menu == option_menu[2]:
    delete_data()
elif main_menu == option_menu[3]:
    append_data()

connection.close()
